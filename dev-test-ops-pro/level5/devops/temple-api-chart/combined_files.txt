--- FILE: ./Chart.yaml ---
apiVersion: v2
name: temple-api-chart
description: A Helm chart for deploying a Strapi API server with PostgreSQL.
version: 0.1.0
appVersion: "1.12"

--- FILE: ./templates/strapi-ingress.yaml ---
{{- if .Values.ingress.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Values.apiserver.name }}-ingress
  annotations:
    {{- range $key, $value := .Values.ingress.annotations }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
  labels:
    app: {{ .Values.apiserver.name }}
spec:
  ingressClassName: {{ .Values.ingress.className }}
  rules:
  - host: {{ .Values.ingress.host }}
    http:
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: {{ .Values.apiserver.name }}-service
              port:
                number: {{ .Values.apiserver.servicePort }}
{{- end }}

--- FILE: ./templates/strapi-service.yaml ---
{{- if .Values.apiserver.enabled }}
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.apiserver.name }}-service
  labels:
    app: {{ .Values.apiserver.name }}
spec:
  type: ClusterIP
  selector:
    app: {{ .Values.apiserver.name }}
  ports:
    - port: {{ .Values.apiserver.servicePort }}
      targetPort: {{ .Values.apiserver.containerPort }}
{{- end }}

--- FILE: ./templates/strapi-deployment.yaml ---
{{- if .Values.apiserver.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.apiserver.name }}
  labels:
    app: {{ .Values.apiserver.name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.apiserver.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.apiserver.name }}
    spec:
      initContainers:
        - name: wait-for-postgres
          image: busybox:1.36
          command:
            - sh
            - -c
            - >
              echo "Waiting for Postgres...";
              until nc -z {{ .Values.apiserver.env.DATABASE_HOST }} {{ .Values.apiserver.env.DATABASE_PORT }}; do
                sleep 2;
              done;
              echo "Postgres is up!";
      containers:
      - name: {{ .Values.apiserver.name }}
        image: {{ .Values.apiserver.image }}
        imagePullPolicy: {{ .Values.apiserver.imagePullPolicy }}
        env:
        {{- range $key, $value := .Values.apiserver.env }}
        - name: {{ $key }}
          value: "{{ $value }}"
        {{- end }}
        ports:
        - containerPort: {{ .Values.apiserver.containerPort }}
        readinessProbe:
          httpGet:
            path: /_health
            port: {{ .Values.apiserver.containerPort }}
          initialDelaySeconds: 15
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /_health
            port: {{ .Values.apiserver.containerPort }}
          initialDelaySeconds: 30
          periodSeconds: 20
{{- end }}

--- FILE: ./values.yaml ---
apiserver:
  enabled: true
  name: temple-api
  image: harishdell/templeserver:1.12
  imagePullPolicy: IfNotPresent
  containerPort: 1337
  servicePort: 1337

  env:
    HOST: "0.0.0.0"
    PORT: "1337"
    DATABASE_CLIENT: "postgres"
    DATABASE_HOST: "postgres-postgres.database.svc.cluster.local" 
    DATABASE_PORT: "5432"
    DATABASE_NAME: "temple"
    DATABASE_USERNAME: "postgres"
    DATABASE_PASSWORD: "postgres"
    CENTRALIZED_SERVER: "http://localhost:1337"

ingress:
  enabled: true
  host: "temple-api.local"
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/rewrite-target: /
  tls: []

