--- FILE: ./argo-temple-api.yaml ---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: temple-api
  namespace: argocd
spec:
  project: default

  source:
    repoURL: https://github.com/hcmuleva/els-professional-kits.git
    targetRevision: feature/apiserver
    path: temple-api-chart  # Helm chart path in repo

  destination:
    server: https://kubernetes.default.svc
    namespace: strapi

  syncPolicy:
    automated:
      prune: true
      selfHeal: true

--- FILE: ./postgres/Chart.yaml ---
apiVersion: v2
name: postgres
description: Reusable PostgreSQL Helm chart for shared DB deployments
type: application
version: 0.1.0
appVersion: "15"

--- FILE: ./postgres/templates/service.yaml ---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "postgres.fullname" . }}
  labels:
    {{- include "postgres.labels" . | nindent 4 }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - name: postgres
      port: {{ .Values.service.port }}
      targetPort: {{ .Values.service.port }}
  selector:
    app.kubernetes.io/name: {{ include "postgres.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}

--- FILE: ./postgres/templates/_helpers.tpl ---
{{/*
Return the fully qualified app name for postgres
*/}}
{{- define "postgres.name" -}}
{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" -}}
{{- end -}}

{{/*
Create a default fully qualified app name
*/}}
{{- define "postgres.fullname" -}}
{{- if .Values.fullnameOverride -}}
{{- .Values.fullnameOverride | trunc 63 | trimSuffix "-" -}}
{{- else -}}
{{- printf "%s-%s" .Release.Name (include "postgres.name" .) | trunc 63 | trimSuffix "-" -}}
{{- end -}}
{{- end -}}

{{/*
Common labels (with quotes to avoid invalid types)
*/}}
{{- define "postgres.labels" -}}
helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
app.kubernetes.io/name: "{{ include "postgres.name" . }}"
app.kubernetes.io/instance: "{{ .Release.Name }}"
app.kubernetes.io/version: "{{ .Chart.AppVersion }}"
app.kubernetes.io/managed-by: "{{ .Release.Service }}"
app.kubernetes.io/component: "database"
{{- end -}}

--- FILE: ./postgres/templates/statefulset.yaml ---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "postgres.fullname" . }}
  labels:
    {{- include "postgres.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "postgres.fullname" . }}
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "postgres.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "postgres.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
        - name: postgres
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.port }}
              name: postgres
          {{- if .Values.auth.existingSecret }}
          envFrom:
            - secretRef:
                name: {{ .Values.auth.existingSecret }}
          {{- else }}
          env:
            - name: POSTGRES_USER
              value: "{{ .Values.auth.username }}"
            - name: POSTGRES_PASSWORD
              value: "{{ .Values.auth.password }}"
            - name: POSTGRES_DB
              value: "{{ .Values.auth.database }}"
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
          readinessProbe:
            tcpSocket:
              port: {{ .Values.service.port }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          livenessProbe:
            tcpSocket:
              port: {{ .Values.service.port }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: {{ toYaml .Values.persistence.accessModes | nindent 10 }}
        storageClassName: {{ .Values.persistence.storageClassName | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.size }}

--- FILE: ./postgres/templates/secret.yaml ---
{{- if not .Values.auth.existingSecret }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "postgres.fullname" . }}-secret
  labels:
    {{- include "postgres.labels" . | nindent 4 }}
type: Opaque
data:
  username: {{ .Values.auth.username | b64enc }}
  password: {{ .Values.auth.password | b64enc }}
  database: {{ .Values.auth.database | b64enc }}
{{- end }}

--- FILE: ./postgres/values.yaml ---
image:
  repository: postgres
  tag: "15"
  pullPolicy: IfNotPresent

auth:
  username: postgres
  password: postgres
  database: appdb
  existingSecret: ""   # if you want to inject secret instead of literal values

service:
  type: ClusterIP
  port: 5432
  annotations: {}

persistence:
  enabled: true
  accessModes: [ "ReadWriteOnce" ]
  size: 1Gi
  storageClassName: "hostpath"

resources:
  requests:
    cpu: 100m
    memory: 256Mi
  limits:
    cpu: 500m
    memory: 512Mi

readinessProbe:
  initialDelaySeconds: 10
  periodSeconds: 5

livenessProbe:
  initialDelaySeconds: 30
  periodSeconds: 10

--- FILE: ./temple-api-chart/Chart.yaml ---
apiVersion: v2
name: temple-api-chart
description: A Helm chart for deploying a Strapi API server with PostgreSQL.
version: 0.1.0
appVersion: "1.12"

--- FILE: ./temple-api-chart/templates/strapi-ingress.yaml ---
{{- if .Values.ingress.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Values.apiserver.name }}-ingress
  annotations:
    {{- range $key, $value := .Values.ingress.annotations }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
  labels:
    app: {{ .Values.apiserver.name }}
spec:
  ingressClassName: {{ .Values.ingress.className }}
  rules:
  - host: {{ .Values.ingress.host }}
    http:
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: {{ .Values.apiserver.name }}-service
              port:
                number: {{ .Values.apiserver.servicePort }}
{{- end }}

--- FILE: ./temple-api-chart/templates/strapi-service.yaml ---
{{- if .Values.apiserver.enabled }}
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.apiserver.name }}-service
  labels:
    app: {{ .Values.apiserver.name }}
spec:
  type: ClusterIP
  selector:
    app: {{ .Values.apiserver.name }}
  ports:
    - port: {{ .Values.apiserver.servicePort }}
      targetPort: {{ .Values.apiserver.containerPort }}
{{- end }}

--- FILE: ./temple-api-chart/templates/strapi-deployment.yaml ---
{{- if .Values.apiserver.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.apiserver.name }}
  labels:
    app: {{ .Values.apiserver.name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.apiserver.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.apiserver.name }}
    spec:
      initContainers:
        - name: wait-for-postgres
          image: busybox:1.36
          command:
            - sh
            - -c
            - >
              echo "Waiting for Postgres...";
              until nc -z {{ .Values.apiserver.env.DATABASE_HOST }} {{ .Values.apiserver.env.DATABASE_PORT }}; do
                sleep 2;
              done;
              echo "Postgres is up!";
      containers:
      - name: {{ .Values.apiserver.name }}
        image: {{ .Values.apiserver.image }}
        imagePullPolicy: {{ .Values.apiserver.imagePullPolicy }}
        env:
        {{- range $key, $value := .Values.apiserver.env }}
        - name: {{ $key }}
          value: "{{ $value }}"
        {{- end }}
        ports:
        - containerPort: {{ .Values.apiserver.containerPort }}
        readinessProbe:
          httpGet:
            path: /_health
            port: {{ .Values.apiserver.containerPort }}
          initialDelaySeconds: 15
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /_health
            port: {{ .Values.apiserver.containerPort }}
          initialDelaySeconds: 30
          periodSeconds: 20
{{- end }}

--- FILE: ./temple-api-chart/values.yaml ---
apiserver:
  enabled: true
  name: temple-api
  image: harishdell/templeserver:1.12
  imagePullPolicy: IfNotPresent
  containerPort: 1337
  servicePort: 1337

  env:
    HOST: "0.0.0.0"
    PORT: "1337"
    DATABASE_CLIENT: "postgres"
    DATABASE_HOST: "postgres-postgres.database.svc.cluster.local" 
    DATABASE_PORT: "5432"
    DATABASE_NAME: "temple"
    DATABASE_USERNAME: "postgres"
    DATABASE_PASSWORD: "postgres"
    CENTRALIZED_SERVER: "http://temple-api.local"

ingress:
  enabled: true
  host: "temple-api.local"
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/rewrite-target: /
  tls: []

